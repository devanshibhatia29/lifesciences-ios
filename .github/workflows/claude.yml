name: Claude Code

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      bug_title:
        description: 'Bug Title'
        required: true
        type: string
      bug_description:
        description: 'Bug Description'
        required: true
        type: string

# Add permissions for OIDC token
permissions:
  contents: write  # Need read + write access for branches, commits, and file operations
  id-token: write
  issues: write
  pull-requests: write

jobs:
  claude:
    runs-on: self-hosted  # Use self-hosted runner
    # Run for comments that mention @claude, issues with @claude, or workflow_dispatch
    if: contains(github.event.comment.body, '@claude') || (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Set up environment before running Claude
      - name: Set up Claude environment
        run: |
          echo "Setting up Claude environment variables"
          echo "ANTHROPIC_BASE_URL=https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions" >> $GITHUB_ENV
          echo "ANTHROPIC_API_BASE=https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions" >> $GITHUB_ENV
          echo "CLAUDE_CODE_USE_DIRECT_COMPLETION_ENDPOINT=1" >> $GITHUB_ENV
          # Set the model identifier directly in environment variables
          echo "ANTHROPIC_MODEL=claude-sonnet-4-20250514" >> $GITHUB_ENV
          echo "Environment variables set"
      

      - name: Install dependencies
        run: |
          pip3 install --break-system-packages requests
      
      - name: Call Claude API and Create PR
        run: |
          python3 - << 'EOF'
          import requests
          import os
          import json
          import base64
          from datetime import datetime
          
          # Get inputs
          if "${{ github.event_name }}" == "workflow_dispatch":
              title = "${{ inputs.bug_title }}"
              description = "${{ inputs.bug_description }}"
          else:
              title = "${{ github.event.issue.title }}"
              description = "${{ github.event.issue.body }}"
          
          print(f"Processing bug: {title}")
          
          # Claude API call using your working endpoint
          def get_claude_analysis(title, description):
              api_key = "${{ secrets.ANTHROPIC_API_KEY }}"
              url = 'https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions'
              
              headers = {
                  'Authorization': f'Bearer {api_key}',
                  'Content-Type': 'application/json'
              }
              
              prompt = f"""You are a senior iOS developer working on a Netflix clone app. A bug has been reported:
              
              **Bug Title:** {title}
              **Bug Description:** {description}
              
              RESPONSE GUIDELINES - KEEP IT PROPORTIONAL:
              - For simple one-liner fixes: Provide brief explanation + minimal code changes only
              - For small bugs: Short explanation + targeted fixes to specific methods/properties
              - For complex issues: Detailed analysis + comprehensive implementation
              - AVOID over-engineering simple fixes with unnecessary explanations
              
              Please provide ACTUAL CODE IMPLEMENTATIONS to fix this bug. For each file that needs to be modified, provide:
              
              1. **File Path**: Exact path from project root (e.g., NetflixClone/Controllers/HomeViewController.swift)
              2. **Code Changes**: For simple fixes (typos, one-liners), show only the changed lines with diff format. For complex changes, provide complete file content.
              
              Format your response with clear file markers like:
              ### File: NetflixClone/Controllers/HomeViewController.swift
              ```swift
              // Complete file content here
              ```
              
              Keep explanations concise and proportional to the complexity of the fix.
              """
              
              data = {
                  "model": "claude-sonnet-4-20250514",
                  "max_tokens": 4000,
                  "messages": [{"role": "user", "content": prompt}]
              }
              
              try:
                  response = requests.post(url, headers=headers, json=data, verify=False)
                  if response.status_code == 200:
                      result = response.json()
                      return result['choices'][0]['message']['content']
                  else:
                      print(f"Claude API Error: {response.status_code} - {response.text}")
                      return f"Error: {response.status_code} - {response.text}"
              except Exception as e:
                  print(f"Claude API Exception: {str(e)}")
                  return f"Exception: {str(e)}"
          
          # Get Claude's analysis
          claude_response = get_claude_analysis(title, description)
          print("Claude analysis completed")
          print(f"Response: {claude_response[:200]}...")
          
          # Create Draft PR with Claude's code implementation
          def create_draft_pr(title, description, claude_response):
              # Use personal token for PR creation (GitHub Actions token can't create PRs)
              github_token = "${{ secrets.PERSONAL_GITHUB_TOKEN }}"
              owner = "devanshibhatia29"
              repo = "lifesciences-ios"
              
              headers = {
                  'Authorization': f'token {github_token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              # Create a new branch
              branch_name = f"claude-fix-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
              
              try:
                  # Get the main branch SHA
                  main_response = requests.get(f'https://api.github.com/repos/{owner}/{repo}/git/refs/heads/main', headers=headers)
                  if main_response.status_code != 200:
                      print(f"❌ Failed to get main branch: {main_response.status_code}")
                      return False
                  
                  main_sha = main_response.json()['object']['sha']
                  
                  # Create new branch
                  branch_data = {
                      'ref': f'refs/heads/{branch_name}',
                      'sha': main_sha
                  }
                  
                  branch_response = requests.post(f'https://api.github.com/repos/{owner}/{repo}/git/refs', headers=headers, json=branch_data)
                  if branch_response.status_code != 201:
                      print(f"❌ Failed to create branch: {branch_response.status_code}")
                      return False
                  
                  print(f"✅ Created branch: {branch_name}")
                  
                  # Parse Claude's response and commit files
                  # Look for file markers in Claude's response
                  import re
                  
                  # Try to find "File: path" pattern for both diff and full file formats
                  file_pattern = r'File: (.+?)(?:\n|$)'
                  file_matches = re.findall(file_pattern, claude_response)
                  
                  if file_matches:
                      for file_path in file_matches:
                          file_path = file_path.strip()
                          
                          # Skip if this looks like code content instead of a file path
                          if any(char in file_path for char in ['=', '(', ')', '{', '}', ';']):
                              continue
                              
                          # Get current file content to apply diff
                          get_response = requests.get(f'https://api.github.com/repos/{owner}/{repo}/contents/{file_path}', headers=headers)
                          if get_response.status_code != 200:
                              print(f"❌ File not found: {file_path}")
                              continue
                              
                          current_content = base64.b64decode(get_response.json()['content']).decode('utf-8')
                          
                          # Look for diff changes in the response
                          diff_pattern = rf'File: {re.escape(file_path)}.*?^- (.+)$.*?^\+ (.+)$'
                          diff_match = re.search(diff_pattern, claude_response, re.MULTILINE | re.DOTALL)
                          
                          if diff_match:
                              # Apply diff change
                              old_line = diff_match.group(1)
                              new_line = diff_match.group(2)
                              new_content = current_content.replace(old_line, new_line)
                          else:
                              # Look for full file content in code blocks
                              code_pattern = rf'File: {re.escape(file_path)}.*?```(?:swift|objc)?\n(.*?)\n```'
                              code_match = re.search(code_pattern, claude_response, re.DOTALL)
                              if code_match:
                                  new_content = code_match.group(1)
                              else:
                                  print(f"❌ No changes found for {file_path}")
                                  continue
                          # Encode new content to base64
                          content_encoded = base64.b64encode(new_content.encode('utf-8')).decode('utf-8')
                          
                          file_data = {
                              'message': f'Fix bug: {title}',
                              'content': content_encoded,
                              'branch': branch_name
                          }
                          
                          # Include SHA for file update (we already fetched it above)
                          file_data['sha'] = get_response.json()['sha']
                          
                          file_response = requests.put(f'https://api.github.com/repos/{owner}/{repo}/contents/{file_path}', headers=headers, json=file_data)
                          if file_response.status_code in [200, 201]:
                              print(f"✅ Updated file: {file_path}")
                          else:
                              print(f"❌ Failed to update {file_path}: {file_response.status_code}")
                  
                  # Try to create draft PR first
                  pr_body = f"""## 🐛 Bug Fix: {title}
          
          **Description:** {description}
          
          ## 🤖 Claude's Analysis & Implementation
          
          {claude_response}
          
          ---
          *This PR was automatically generated by Claude AI*
          """
                  
                  pr_data = {
                      'title': f'🔧 Fix: {title}',
                      'head': branch_name,
                      'base': 'main',
                      'body': pr_body,
                      'draft': True
                  }
                  
                  # Try to create PR
                  pr_response = requests.post(f'https://api.github.com/repos/{owner}/{repo}/pulls', headers=headers, json=pr_data)
                  if pr_response.status_code == 201:
                      pr = pr_response.json()
                      print(f"🎉 SUCCESS: Created draft PR: {pr['html_url']}")
                      return True
                  else:
                      print(f"⚠️ PR creation failed ({pr_response.status_code}), creating issue with branch info instead...")
                      print(f"PR Error: {pr_response.text}")
                      
                      # Fallback: create issue with branch link
                      issue_body = f"""## 🐛 Bug Fix: {title}
          
          **Description:** {description}
          
          ## 🚀 Branch Created: `{branch_name}`
          
          **Create PR manually:** https://github.com/{owner}/{repo}/compare/main...{branch_name}
          
          ## 🤖 Claude's Analysis & Implementation
          
          {claude_response}
          
          ---
          *Branch created automatically by Claude AI - click link above to create PR*
          """
                      
                      issue_data = {
                          'title': f'🔧 [Ready for PR] Fix: {title}',
                          'body': issue_body
                      }
                      
                      issue_response = requests.post(f'https://api.github.com/repos/{owner}/{repo}/issues', headers=headers, json=issue_data)
                      if issue_response.status_code == 201:
                          issue = issue_response.json()
                          print(f"✅ Created issue with PR link: {issue['html_url']}")
                          return True
                      else:
                          print(f"❌ Both PR and issue creation failed: {issue_response.status_code}")
                          return False
                  
              except Exception as e:
                  print(f"❌ Exception creating PR: {str(e)}")
                  return False
          
          # Create the draft PR with Claude's implementation
          create_draft_pr(title, description, claude_response)
          EOF
        env:
          PYTHONHTTPSVERIFY: 0